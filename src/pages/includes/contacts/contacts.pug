.contacts
  .grid-container
    .grid-row
      .grid-col-12.contacts_box
        .contacts_map
          #map(style='width: 100%; height: 600px')
          #result(style='display:none;')
          script(src='https://api-maps.yandex.ru/2.1/?lang=ru_RU&onload=init')
          script.
            var shops = [
              {
                address: [
                  {
                    street: 'ул. им. В. Головатого, 313 в ТЦ «Галерея Краснодар»',
                    cords: [45.040550, 38.974541],
                    contacts: {
                      city: 'Краснодар',
                      address: 'ул. им. В. Головатого, 313',
                      phone: '',
                      schedule: ''
                    }
                  }
                ]
              },
            ];
            var myMap,
                    myMapZoom = 12,
                    myMapCenter = [45.06485110599653,38.975174179599634],
                    myCollection,
                    myPlacemarks = [],
                    counter = 0;
            function init(ymaps) {
              var MyBalloonLayout = ymaps.templateLayoutFactory.createClass(
                      '<div class="Tooltip -up -maps" >' +
                      '<a class="closeMap" onclick="myMap.balloon.close();"></a>' +
                      '$[[options.contentLayout observeSize minWidth=100 maxWidth=241 maxHeight=350]]' +
                      '</div>',
                      {
                        // Строит экземпляр макета на основе шаблона и добавляет его в родительский HTML-элемент.
                        build: function () {
                          this.constructor.superclass.build.call(this);
                          this._$element = $('.Tooltip', this.getParentElement());
                          this.applyElementOffset();
                        },
                        // Удаляет содержимое макета из DOM
                        clear: function () {
                          this.constructor.superclass.clear.call(this);
                        },
                        // Метод будет вызван системой шаблонов АПИ при изменении размеров вложенного макета.
                        onSublayoutSizeChange: function () {
                          MyBalloonLayout.superclass.onSublayoutSizeChange.apply(this, arguments);
                          if (!this._isElement(this._$element)) {
                            return;
                          }
                          this.applyElementOffset();
                          this.events.fire('shapechange');
                        },
                        // Сдвигаем балун, чтобы "хвостик" указывал на точку привязки.
                        applyElementOffset: function () {
                          this._$element.css({
                            left: -(this._$element[0].offsetWidth / 2),
                            top: -(this._$element[0].offsetHeight)
                          });
                        },
                        // Используется для автопозиционирования (balloonAutoPan).
                        getShape: function () {
                          if (!this._isElement(this._$element)) {
                            return MyBalloonLayout.superclass.getShape.call(this);
                          }
                          var position = this._$element.position();
                          return new ymaps.shape.Rectangle(new ymaps.geometry.pixel.Rectangle([
                            [position.left, position.top], [
                              position.left + this._$element[0].offsetWidth,
                              position.top + this._$element[0].offsetHeight
                            ]
                          ]));
                        },
                        // Проверяем наличие элемента (в ИЕ и Опере его еще может не быть).
                        _isElement: function (element) {
                          return element && element[0]
                        }
                      }),
                      // Создание вложенного макета содержимого балуна.
                      MyBalloonContentLayout = ymaps.templateLayoutFactory.createClass(
                              '<div class="Tooltip-content">$[properties.balloonContent]</div>'
                      ),
                      geolocation = ymaps.geolocation;
              if ($(window).width() < 992) {
                myMapZoom = 9;
                myMapCenter = [45.040550, 38.974541];
              }
              myMap = new ymaps.Map("map", {
                center: myMapCenter,
                zoom: myMapZoom,
                controls: [],
                behaviors: ['dblClickZoom', 'drag', 'multiTouch']
              });
              var fullscreenControl = new ymaps.control.FullscreenControl();
              myMap.controls.add(fullscreenControl);
              // Создаем неупорядоченную коллекцию маркеров
              myCollectionMarker = new ymaps.GeoObjectCollection({}, {
                iconLayout: 'default#image',
                iconImageHref: './img/map_pin.svg',
                iconImageSize: [45, 60],
                iconImageOffset: [-22, -60],
                hideIconOnBalloonOpen: false
              });
              // Создадим метки и добавим их в коллекции
              var pl;
              $.each(shops, function (index, item) {
                for (var i = 0; i < item.address.length; i++) {
                  myPlacemarks[index] = new ymaps.Placemark(
                          item.address[i].cords,
                          {
                            balloonContent: '<p>' + item.address[i].contacts.city + '</p>' +
                                    '<dl class="Contacts-dl">' +
                                    '<dt>Адрес: </dt>' +
                                    '<dd>' + item.address[i].contacts.address + '</dd>' +
                                    '<dt>Телефон: </dt>' +
                                    '<dd>' + item.address[i].contacts.phone + '</dd>' +
                                    '<dt>График работы: </dt>' +
                                    '<dd>' + item.address[i].contacts.schedule + '</dd>'// + '<dl>'
                          },
                          {
                            balloonShadow: false,
                            balloonLayout: MyBalloonLayout,
                            balloonContentLayout: MyBalloonContentLayout,
                            balloonPanelMaxMapArea: 0,
                            hideIconOnBalloonOpen: false,
                            balloonOffset: [0, -10]
                          }
                  );
                  $("#a" + index).click(function (e) {
                    var coord = myPlacemarks[index].geometry.getCoordinates();
                    myMap.panTo(myPlacemarks[index].geometry.getCoordinates(), {
                      delay: 500
                    });
                    myMap.setCenter(coord, 18);
                    myPlacemarks[index].balloon.open();
                    for (j = 0; j < myCollectionMarker.getLength(); j++) {
                      var currentPm = myCollectionMarker.get(j);
                      currentPm.options.set(
                              {iconImageHref: './img/map_pin.svg'}
                      );
                      //currentPm.balloon.open();
                    }
                    // Цвет текущей метки
                    myPlacemarks[index].options.set({
                      iconImageHref: './img/map_icon_red.svg'
                    });
                    event.preventDefault();
                  });
                  myCollectionMarker.add(myPlacemarks[index]);
                  for (i = 0; i < myCollectionMarker.getLength(); i++) {
                    var pm = myCollectionMarker.get(i);
                    if (pm.properties.get('name')) {
                      pm.properties.set({
                        'hintContent': pm.properties.get('name')
                      });
                    }
                    // Обработчик клика для метки
                    pm.events.add('click', function (e) {
                      // Цвет всех меток
                      for (j = 0; j < myCollectionMarker.getLength(); j++) {
                        var currentPm = myCollectionMarker.get(j);
                        currentPm.options.set(
                                {iconImageHref: './img/map_icon_blue.svg'}
                        );
                      }
                      // Цвет текущей метки
                      e.get('target').options.set({
                        iconImageHref: './img/map_icon_red.svg'
                      });
                    });
                  }
                  myCollectionMarker.add(myPlacemarks[index]);
                }
              });
              // Теперь добавим коллекции геообъектов на карту
              myMap.geoObjects.add(myCollectionMarker);
              $('.maps .wrapper').appendTo($('.mapsBox > ymaps > ymaps > ymaps'));
            }


        .contacts_inner
          .tel_block
            .icon_tel.sand
              svg(width='35', height='35', viewBox='0 0 35 35', fill='none', xmlns='http://www.w3.org/2000/svg')
                circle(cx='17.5', cy='17.5', r='16.75', stroke='#2E6D5C', stroke-width='1.5')
                path(d='M21.0575 23.0308C18.7115 23.0308 16.2903 21.948 14.4105 20.0682C12.4254 18.0831 11.3426 15.6018 11.4028 13.2107V13.1204L11.4629 13.0452C11.6283 12.8347 11.7938 12.6542 11.9592 12.4738C12.5908 11.8422 13.3277 11.3609 14.1548 11.0451C14.23 11.015 14.3202 11 14.4105 11C14.6962 11 15.1774 11.1504 15.2677 11.4361C15.5684 12.2482 15.9294 13.3159 16.2 14.3235C16.2452 14.519 16.2 15.0905 15.9143 15.2559L14.9519 15.8574C14.8917 15.9025 14.8616 15.9627 14.8466 16.0229C14.8165 16.1883 14.8767 16.3988 14.997 16.5793C15.3729 17.1056 15.809 17.6169 16.3053 18.1132C16.8016 18.5944 17.3129 19.0306 17.8242 19.4065C18.0799 19.602 18.4408 19.6171 18.531 19.4667L19.1476 18.5042C19.298 18.2636 19.7642 18.2034 19.9296 18.2034C19.9897 18.2034 20.0349 18.2034 20.08 18.2185C21.3131 18.4892 22.05 18.7298 22.9974 19.1659C23.2832 19.3012 23.4937 19.9329 23.3584 20.2787C23.0426 21.1059 22.5613 21.8427 21.9297 22.4744C21.7492 22.6548 21.5537 22.8203 21.3582 22.9706L21.3131 23.0308H21.0575ZM11.9442 13.3159C11.9141 15.5416 12.9367 17.8425 14.7564 19.6471L14.8015 19.6922C16.576 21.4668 18.8619 22.4894 21.0575 22.4894H21.1327C21.2981 22.3541 21.4485 22.2187 21.5838 22.0834C22.1553 21.5119 22.5914 20.8352 22.8922 20.0682C22.9222 19.978 22.8471 19.6922 22.7719 19.6321C21.8996 19.2411 21.1928 19.0155 19.9897 18.7448C19.8243 18.7448 19.6589 18.7899 19.6138 18.82L19.0273 19.7524C18.7716 20.1735 18.0498 20.2186 17.5385 19.8426C16.9971 19.4516 16.4707 19.0005 15.9594 18.4892C15.4481 17.9779 14.997 17.4365 14.606 16.8951C14.3804 16.5943 14.2902 16.2334 14.3503 15.9176C14.3954 15.692 14.5157 15.5115 14.6962 15.3912L15.6587 14.7897C15.6737 14.7446 15.7188 14.519 15.7038 14.4438C15.4481 13.4513 15.0722 12.3986 14.7864 11.6015C14.7564 11.5865 14.5759 11.5263 14.4405 11.5263C14.3954 11.5263 14.3804 11.5263 14.3804 11.5263C13.6134 11.8271 12.9367 12.2632 12.3652 12.8347C12.2148 13.0001 12.0795 13.1505 11.9442 13.3159Z', fill='#2E6D5C', stroke='#2E6D5C', stroke-width='0.8')
            .tel_box.gr
              a.tel_number(href='tel:8 (800) 200-06-00') 8 (800) 200-06-00
              .tel_descr Ждём звонка ежедневно с 9:00 до 21:00
          .address_block
            .icon_address.sand
              svg(width='35', height='35', viewBox='0 0 35 35', fill='none', xmlns='http://www.w3.org/2000/svg')
                circle(cx='17.5', cy='17.5', r='16.75', stroke='#BBA688', stroke-width='1.5')
                path(d='M21.4298 11.6149C19.2767 9.46172 15.7719 9.46172 13.6188 11.6149C12.723 12.5107 12.1572 13.6988 12.0283 14.9624C11.8994 16.2229 12.2137 17.5022 12.9115 18.5615C12.9147 18.5677 12.9178 18.5709 12.921 18.5772L17.2178 24.4708C17.2901 24.5682 17.4033 24.6248 17.5227 24.6248C17.6422 24.6248 17.7553 24.5682 17.8276 24.4708L22.1244 18.5772C22.1276 18.5709 22.1307 18.5677 22.1339 18.5615C22.8317 17.5022 23.146 16.226 23.0171 14.9624C22.8914 13.702 22.3256 12.5107 21.4298 11.6149ZM21.5115 18.1403L17.5227 23.6064L13.5339 18.1403C12.9336 17.2287 12.6664 16.1254 12.7764 15.041C12.8864 13.9503 13.3736 12.9256 14.15 12.1523C16.0108 10.2915 19.0346 10.2915 20.8954 12.1523C21.6687 12.9256 22.1559 13.9534 22.269 15.041C22.3791 16.1254 22.1087 17.2256 21.5115 18.1403Z', fill='#BBA688', stroke='#BBA688', stroke-width='0.5')
                path(d='M17.5211 12.8379C16.2544 12.8379 15.2266 13.8689 15.2266 15.1325C15.2266 16.3961 16.2576 17.4271 17.5211 17.4271C18.7847 17.4271 19.8157 16.3961 19.8157 15.1325C19.8157 13.8689 18.7879 12.8379 17.5211 12.8379ZM17.5211 16.6727C16.6725 16.6727 15.9809 15.9812 15.9809 15.1325C15.9809 14.2838 16.6725 13.5923 17.5211 13.5923C18.3698 13.5923 19.0613 14.2838 19.0613 15.1325C19.0613 15.9812 18.3698 16.6727 17.5211 16.6727Z', fill='#BBA688', stroke='#BBA688', stroke-width='0.5')
            .tel_box.gr
              .tel_descr
                | ул. им. В. Головатого, 313
                br
                |в ТЦ «Галерея Краснодар»



